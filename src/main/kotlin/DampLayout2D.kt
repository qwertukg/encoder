import kotlin.math.ceil
import kotlin.math.exp
import kotlin.math.max
import kotlin.math.min
import kotlin.math.sqrt
import kotlin.random.Random

/**
 * DampLayout2D ‚Äî –¥–∏—Å–∫—Ä–µ—Ç–Ω–∞—è 2D-—Ä–∞—Å–∫–ª–∞–¥–∫–∞ –∫–æ–¥–æ–≤ –ø–æ –∫–∞–Ω–æ–Ω—É –≥–ª–∞–≤—ã¬†5 DAML.
 *
 * –ê–ª–≥–æ—Ä–∏—Ç–º —Ä–µ–∞–ª–∏–∑—É–µ—Ç —ç—Ç–∞–ø—ã, –æ–ø–∏—Å–∞–Ω–Ω—ã–µ –≤ —Ä–∞–∑–¥.¬†5.5‚Äì5.9 –∏ –ø.¬†7.1.7:
 * 1) —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –º–∞—Ç—Ä–∏—Ü—ã ùêï —Å –∑–∞–ø–∞—Å–æ–º ‚âà15¬†% —Å–≤–æ–±–æ–¥–Ω—ã—Ö —è—á–µ–µ–∫ (d¬≤ ‚âà n ‚ãÖ 1.15);
 * 2) —Å–ª—É—á–∞–π–Ω–∞—è –Ω–∞—á–∞–ª—å–Ω–∞—è —Ä–∞—Å–∫–ª–∞–¥–∫–∞ –∫–æ–¥–æ–≤ –ø–æ —è—á–µ–π–∫–∞–º (—Ä–∏—Å.¬†17–∞);
 * 3) –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –¥–∞–ª—å–Ω–∏–π (long-range) —ç—Ç–∞–ø: –º–∏–Ω–∏–º–∏–∑–∞—Ü–∏—è —ç–Ω–µ—Ä–≥–∏–∏ ùúë —á–µ—Ä–µ–∑ –æ–±–º–µ–Ω –ø–∞—Ä
 *    —Ç–æ—á–µ–∫, –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –≤ —Ä–∞–¥–∏—É—Å–µ r, —Å –ø–æ—Ä–æ–≥–æ–≤–æ–π –º–µ—Ç—Ä–∏–∫–æ–π simùúÜ (—Ñ–æ—Ä–º—É–ª—ã 5.5.1);
 * 4) –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ–µ —É–∂–µ—Å—Ç–æ—á–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–∞ ùúÜ –∏ —Å–∂–∞—Ç–∏–µ —Ä–∞–¥–∏—É—Å–∞ r, –∫–∞–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–ª–æ—Å—å
 *    –¥–ª—è –º–æ—Ä—Ñ–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —ç–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∞ (–ø.¬†7.1.7);
 * 5) –±–ª–∏–∂–Ω–∏–π (short-range) —ç—Ç–∞–ø: –º–∞–∫—Å–∏–º–∏–∑–∞—Ü–∏—è –ª–æ–∫–∞–ª—å–Ω–æ–π —ç–Ω–µ—Ä–≥–∏–∏ –ø–æ (5.5.2) –≤–Ω—É—Ç—Ä–∏
 *    –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏ ùêë –ø–∞—Ä—ã —Ç–æ—á–µ–∫.
 *
 * –í—Ö–æ–¥–Ω—ã–µ –∫–æ–¥—ã —Ç—Ä–∞–∫—Ç—É—é—Ç—Å—è –∫–∞–∫ —Ä–∞–∑—Ä–µ–∂—ë–Ω–Ω—ã–µ –±–∏—Ç–æ–≤—ã–µ –≤–µ–∫—Ç–æ—Ä—ã, –¥–ª—è –º–µ—Ä—ã –±–ª–∏–∑–æ—Å—Ç–∏
 * –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –¥–∏—Å–∫—Ä–µ—Ç–Ω—ã–π –∫–æ—Å–∏–Ω—É—Å (—Ä–∞–∑–¥.¬†2.2.4.1) —Å –ø–æ—Ä–æ–≥–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–µ–π ùúè(x).
 */
class DampLayout2D(
    private val codes: List<IntArray>,
    private val parameters: Parameters = Parameters(),
    random: Random? = null,
) {
    /** –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ä–∞—Å–∫–ª–∞–¥–∫–∏, –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ –∫–∞–Ω–æ–Ω —Å—Ç–∞—Ç—å–∏. */
    data class Parameters(
        val marginFraction: Double = 0.15, // –∑–∞–ø–∞—Å –ø—É—Å—Ç—ã—Ö —è—á–µ–µ–∫ ‚âà15¬†% (–ø.¬†7.1.7)
        val lambdaStart: Double = 0.65,    // –Ω–∞—á–∞–ª—å–Ω–æ–µ ùúÜ (–ø.¬†7.1.7)
        val lambdaEnd: Double = 0.8,       // –∫–æ–Ω–µ—á–Ω–æ–µ ùúÜ (–ø.¬†7.1.7)
        val lambdaStep: Double = 0.05,     // —à–∞–≥ —É–∂–µ—Å—Ç–æ—á–µ–Ω–∏—è –ø–æ—Ä–æ–≥–∞
        val eta: Double = Double.POSITIVE_INFINITY, // ùúÇ = ‚àû ‚Äî –∂—ë—Å—Ç–∫–∏–π –æ—Ç—Å–µ–≤ (–ø.¬†7.1.7)
        val initialRadiusFraction: Double = 0.5,    // —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —Ä–∞–¥–∏—É—Å r = d / 2
        val radiusDecayFactor: Double = 0.5,        // —É–º–µ–Ω—å—à–µ–Ω–∏–µ —Ä–∞–¥–∏—É—Å–∞ –ø—Ä–∏ —Å—Ç–∞–≥–Ω–∞—Ü–∏–∏
        val minRadius: Double = 1.0,                // –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–¥–∏—É—Å –æ—Ç–±–æ—Ä–∞ –ø–∞—Ä
        val pairCountPerStep: Int? = null,          // ùëù ‚Äî —á–∏—Å–ª–æ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–∞—Ä –∑–∞ —à–∞–≥
        val maxLongRangeSteps: Int = 50,
        val maxShortRangeSteps: Int = 30,
        val swapRatioThreshold: Double = 0.01,      // –ø–æ—Ä–æ–≥ 1¬†% –æ—Ç –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –æ–±–º–µ–Ω–∞ (–ø.¬†7.1.7)
        val shortRangeBaseRadius: Double = 2.0,     // –±–∞–∑–æ–≤—ã–π —Ä–∞–¥–∏—É—Å –¥–ª—è –±–ª–∏–∂–Ω–µ–≥–æ —ç—Ç–∞–ø–∞
    )

    private val rnd: Random = random ?: Random.Default
    private val vectorLength: Int
    private val norms: DoubleArray

    private lateinit var grid: Array<Array<Int?>> // –º–∞—Ç—Ä–∏—Ü–∞ ùêï (–∏–Ω–¥–µ–∫—Å—ã –∫–æ–¥–æ–≤ –∏–ª–∏ null)
    private lateinit var positions: Array<IntArray> // –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–æ–¥–æ–≤ –≤ –º–∞—Ç—Ä–∏—Ü–µ
    private var height: Int = 0
    private var width: Int = 0

    init {
        require(codes.isNotEmpty()) { "–°–ø–∏—Å–æ–∫ –∫–æ–¥–æ–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º" }
        vectorLength = codes.first().size
        require(codes.all { it.size == vectorLength }) {
            "–í—Å–µ –∫–æ–¥—ã –¥–æ–ª–∂–Ω—ã –∏–º–µ—Ç—å –æ–¥–∏–Ω–∞–∫–æ–≤—É—é –¥–ª–∏–Ω—É"
        }
        require(vectorLength > 0) { "–ö–æ–¥ –Ω–µ –º–æ–∂–µ—Ç –∏–º–µ—Ç—å –Ω—É–ª–µ–≤—É—é –¥–ª–∏–Ω—É" }
        norms = DoubleArray(codes.size) { index ->
            val ones = codes[index].count { it != 0 }
            if (ones == 0) 0.0 else sqrt(ones.toDouble())
        }
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Ü–∏–∫–ª —Ä–∞—Å–∫–ª–∞–¥–∫–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ñ–∏–Ω–∞–ª—å–Ω—É—é –º–∞—Ç—Ä–∏—Ü—É ùêï.
     * –Ø—á–µ–π–∫–∏ –±–µ–∑ –∫–æ–¥–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏–µ–º null.
     */
    fun layout(): List<List<IntArray?>> {
        initialiseMatrix()
        performLongRangePhase()
        performShortRangePhase()
        return buildResult()
    }

    private fun initialiseMatrix() {
        val codeCount = codes.size
        val totalSlots = ceil(codeCount * (1.0 + parameters.marginFraction)).toInt().coerceAtLeast(codeCount)
        val side = ceil(sqrt(totalSlots.toDouble())).toInt().coerceAtLeast(1)
        height = side
        width = side
        grid = Array(height) { arrayOfNulls<Int?>(width) }
        positions = Array(codes.size) { IntArray(2) }

        // –°–ª—É—á–∞–π–Ω–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–¥—ã –ø–æ —è—á–µ–π–∫–∞–º (—Ä–∏—Å.¬†17–∞).
        val slots = MutableList(height * width) { it }
        slots.shuffle(rnd)
        codes.indices.forEach { codeIndex ->
            val slot = slots[codeIndex]
            val y = slot / width
            val x = slot % width
            grid[y][x] = codeIndex
            positions[codeIndex][0] = y
            positions[codeIndex][1] = x
        }
    }

    private fun performLongRangePhase() {
        var lambda = parameters.lambdaStart
        var radius = max(parameters.minRadius, max(height, width) * parameters.initialRadiusFraction)
        val pairCount = max(1, parameters.pairCountPerStep ?: codes.size)
        var baselineSwaps: Double? = null

        for (step in 0 until parameters.maxLongRangeSteps) {
            var swaps = 0
            repeat(pairCount) {
                val pair = pickPair(radius) ?: return@repeat
                val (first, second) = pair
                val firstIndex = grid[first.first][first.second]
                val secondIndex = grid[second.first][second.second]
                val currentEnergy = computeLongRangeEnergy(firstIndex, first.first, first.second, secondIndex, second.first, second.second, lambda)
                val swappedEnergy = computeLongRangeEnergy(secondIndex, first.first, first.second, firstIndex, second.first, second.second, lambda)
                if (swappedEnergy < currentEnergy) {
                    swapCells(first, second)
                    swaps++
                }
            }
            if (baselineSwaps == null) {
                baselineSwaps = swaps.toDouble().coerceAtLeast(1.0)
            }
            if (swaps == 0) {
                val lambdaChanged = if (lambda < parameters.lambdaEnd) {
                    lambda = min(lambda + parameters.lambdaStep, parameters.lambdaEnd)
                    true
                } else false
                val radiusChanged = if (radius > parameters.minRadius) {
                    radius = max(radius * parameters.radiusDecayFactor, parameters.minRadius)
                    true
                } else false
                if (!lambdaChanged && !radiusChanged) break
                continue
            }
            val target = baselineSwaps!! * parameters.swapRatioThreshold
            if (swaps <= target) {
                if (lambda < parameters.lambdaEnd) {
                    lambda = min(lambda + parameters.lambdaStep, parameters.lambdaEnd)
                }
                if (radius > parameters.minRadius) {
                    radius = max(radius * parameters.radiusDecayFactor, parameters.minRadius)
                }
            }
            if (lambda >= parameters.lambdaEnd && radius <= parameters.minRadius) break
        }
    }

    private fun performShortRangePhase() {
        val pairCount = max(1, parameters.pairCountPerStep ?: codes.size)
        val lambda = parameters.lambdaEnd
        val baseRadius = parameters.shortRangeBaseRadius

        for (step in 0 until parameters.maxShortRangeSteps) {
            var swaps = 0
            repeat(pairCount) {
                val pair = pickPair(max(baseRadius, parameters.minRadius)) ?: return@repeat
                val (first, second) = pair
                val firstIndex = grid[first.first][first.second]
                val secondIndex = grid[second.first][second.second]
                val distance = sqrt(distanceSquared(first.first, first.second, second.first, second.second))
                val radius = max(baseRadius, distance)
                val currentEnergy = computeShortRangeEnergy(firstIndex, first.first, first.second, secondIndex, second.first, second.second, lambda, radius)
                val swappedEnergy = computeShortRangeEnergy(secondIndex, first.first, first.second, firstIndex, second.first, second.second, lambda, radius)
                if (swappedEnergy > currentEnergy) {
                    swapCells(first, second)
                    swaps++
                }
            }
            if (swaps == 0) break
        }
    }

    private fun computeLongRangeEnergy(
        firstIndex: Int?,
        y1: Int,
        x1: Int,
        secondIndex: Int?,
        y2: Int,
        x2: Int,
        lambda: Double,
    ): Double {
        var total = 0.0
        for (y in 0 until height) {
            for (x in 0 until width) {
                val idx = grid[y][x] ?: continue
                val s1 = similarityWithThreshold(firstIndex, idx, lambda)
                val s2 = similarityWithThreshold(secondIndex, idx, lambda)
                if (s1 == 0.0 && s2 == 0.0) continue
                val d1 = distanceSquared(y1, x1, y, x)
                val d2 = distanceSquared(y2, x2, y, x)
                total += s1 * d1 + s2 * d2
            }
        }
        return total
    }

    private fun computeShortRangeEnergy(
        firstIndex: Int?,
        y1: Int,
        x1: Int,
        secondIndex: Int?,
        y2: Int,
        x2: Int,
        lambda: Double,
        radius: Double,
    ): Double {
        val cy = (y1 + y2) / 2.0
        val cx = (x1 + x2) / 2.0
        val radiusSquared = radius * radius
        val minY = max(0, kotlin.math.floor(cy - radius).toInt())
        val maxY = min(height - 1, kotlin.math.ceil(cy + radius).toInt())
        val minX = max(0, kotlin.math.floor(cx - radius).toInt())
        val maxX = min(width - 1, kotlin.math.ceil(cx + radius).toInt())
        var total = 0.0
        for (y in minY..maxY) {
            val dyCenter = y - cy
            val dyCenterSquared = dyCenter * dyCenter
            for (x in minX..maxX) {
                val dxCenter = x - cx
                val centerDistanceSquared = dyCenterSquared + dxCenter * dxCenter
                if (centerDistanceSquared > radiusSquared) continue
                val idx = grid[y][x]
                val s1 = similarityWithThreshold(firstIndex, idx, lambda)
                val s2 = similarityWithThreshold(secondIndex, idx, lambda)
                if (s1 == 0.0 && s2 == 0.0) continue
                val d1 = max(distanceSquared(y1, x1, y, x), 1e-9)
                val d2 = max(distanceSquared(y2, x2, y, x), 1e-9)
                total += s1 / d1 + s2 / d2
            }
        }
        return total
    }

    private fun similarityWithThreshold(firstIndex: Int?, secondIndex: Int?, lambda: Double): Double {
        if (firstIndex == null || secondIndex == null) return 0.0
        val raw = rawSimilarity(firstIndex, secondIndex)
        if (raw <= 0.0) return 0.0
        return applyThreshold(raw, lambda)
    }

    private fun rawSimilarity(aIndex: Int, bIndex: Int): Double {
        if (aIndex == bIndex) return 1.0
        val normA = norms[aIndex]
        val normB = norms[bIndex]
        if (normA == 0.0 || normB == 0.0) return 0.0
        val a = codes[aIndex]
        val b = codes[bIndex]
        var intersection = 0
        for (i in 0 until vectorLength) {
            if (a[i] != 0 && b[i] != 0) {
                intersection++
            }
        }
        return intersection / (normA * normB)
    }

    private fun applyThreshold(raw: Double, lambda: Double): Double {
        return if (parameters.eta.isInfinite()) {
            if (raw >= lambda) raw else 0.0
        } else {
            val sigma = 1.0 / (1.0 + exp(-parameters.eta * (raw - lambda)))
            raw * sigma
        }
    }

    private fun pickPair(radius: Double): Pair<Pair<Int, Int>, Pair<Int, Int>>? {
        val firstIndex = rnd.nextInt(codes.size)
        val y1 = positions[firstIndex][0]
        val x1 = positions[firstIndex][1]
        val second = pickNeighbour(y1, x1, radius) ?: return null
        return (y1 to x1) to second
    }

    private fun pickNeighbour(y1: Int, x1: Int, radius: Double): Pair<Int, Int>? {
        val radiusAdjusted = max(radius, 1.0)
        val radiusSquared = radiusAdjusted * radiusAdjusted
        val minY = max(0, kotlin.math.floor(y1 - radiusAdjusted).toInt())
        val maxY = min(height - 1, kotlin.math.ceil(y1 + radiusAdjusted).toInt())
        val minX = max(0, kotlin.math.floor(x1 - radiusAdjusted).toInt())
        val maxX = min(width - 1, kotlin.math.ceil(x1 + radiusAdjusted).toInt())
        var chosen: Pair<Int, Int>? = null
        var seen = 0
        for (y in minY..maxY) {
            val dy = (y - y1).toDouble()
            val dySquared = dy * dy
            for (x in minX..maxX) {
                if (y == y1 && x == x1) continue
                val dx = (x - x1).toDouble()
                val distanceSquared = dySquared + dx * dx
                if (distanceSquared > radiusSquared) continue
                seen++
                if (rnd.nextInt(seen) == 0) {
                    chosen = y to x
                }
            }
        }
        return chosen
    }

    private fun swapCells(first: Pair<Int, Int>, second: Pair<Int, Int>) {
        val (y1, x1) = first
        val (y2, x2) = second
        val firstIndex = grid[y1][x1]
        val secondIndex = grid[y2][x2]
        grid[y1][x1] = secondIndex
        grid[y2][x2] = firstIndex
        if (firstIndex != null) {
            positions[firstIndex][0] = y2
            positions[firstIndex][1] = x2
        }
        if (secondIndex != null) {
            positions[secondIndex][0] = y1
            positions[secondIndex][1] = x1
        }
    }

    private fun distanceSquared(y1: Int, x1: Int, y2: Int, x2: Int): Double {
        val dy = (y1 - y2).toDouble()
        val dx = (x1 - x2).toDouble()
        return dy * dy + dx * dx
    }

    private fun buildResult(): List<List<IntArray?>> {
        return List(height) { y ->
            List(width) { x ->
                val index = grid[y][x]
                index?.let { codes[it].copyOf() }
            }
        }
    }
}
